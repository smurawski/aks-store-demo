name: Deploy test environment

on:
  workflow_call:
    inputs:
      resourceGroupName:
        required: true
        type: string
      deploymentName:
        required: true
        type: string
      environmentName:
        required: true
        type: string
      chaosEnabled:
        required: true
        type: boolean
      location:
        required: true
        type: string
    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true


permissions:
  id-token: write
  contents: read

jobs:
  deploy_environment:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: azure/login@v1
      name: Sign in to Azure
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    - run: az group create --name ${{ inputs.resourceGroupName }}${{ inputs.environmentName }}${{ github.run_number }} --location ${{ inputs.location }}
    - uses: azure/arm-deploy@v1
      id: deploy
      name: Deploy Bicep file
      with:
        failOnStdErr: false
        deploymentName: ${{ inputs.environmentName }}
        scope: resourcegroup
        resourceGroupName: ${{ inputs.resourceGroupName }}${{ inputs.environmentName }}${{ github.run_number }}
        template: ./iac/main.bicep
        parameters: >
         location=${{ inputs.location }}
         includeChaosTesting=${{ inputs.chaosEnabled }}
         prefixHyphenated=${{ inputs.resourceGroupName }}-${{ inputs.environmentName }}
    - run: |
        rg=${{ inputs.resourceGroupName }}${{ inputs.environmentName }}${{ github.run_number }}
        aksName=$(az deployment group show -g $rg -n ${{ inputs.environmentName }} --query properties.outputs.aksName.value -o tsv)

        az aks get-credentials --resource-group $rg --name $aksName
        
        echo "Set up Chaos Mesh"
        helm repo add chaos-mesh https://charts.chaos-mesh.org
        helm repo update
        kubectl create ns chaos-testing
        helm install chaos-mesh chaos-mesh/chaos-mesh --namespace=chaos-testing --set chaosDaemon.runtime=containerd --set chaosDaemon.socketPath=/run/containerd/containerd.sock
        
        echo "Deploy AKS Store"
        kubectl apply -f ./aks-store-all-in-one.yaml
        
        deploymentEndpoint=$(az deployment group show -g ${{ inputs.resourceGroupName }} -n ${{ inputs.deploymentName }} --query properties.outputs.aiEndpoint.value -o tsv)
        aiKey=$(az deployment group show -g ${{ inputs.resourceGroupName }} -n ${{ inputs.deploymentName }} --query properties.outputs.aiApiKey.value -o tsv)
        echo "Deploy AI Service"
        kubectl apply -f - <<EOF
        ---
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: ai-service
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: ai-service
          template: 
            metadata:
              labels:
                app: ai-service
            spec:
              nodeSelector:
                "kubernetes.io/os": linux
              containers:
              - name: order-service
                image: ghcr.io/azure-samples/aks-store-demo/ai-service:latest
                ports:
                - containerPort: 5001
                env:
                - name: USE_AZURE_OPENAI # set to True for Azure OpenAI, False for Public OpenAI
                  value: "True"
                - name: AZURE_OPENAI_DEPLOYMENT_NAME # required if using Azure OpenAI
                  value: "gpt-35-turbo"
                - name: AZURE_OPENAI_ENDPOINT # required if using Azure OpenAI
                  value: "$deploymentEndpoint"
                - name: OPENAI_API_KEY # always required
                  value: "$aiKey"
                - name: OPENAI_ORG_ID # required if using Public OpenAI
                  value: ""
                resources:
                  requests:
                    cpu: 20m
                    memory: 50Mi
                  limits:
                    cpu: 30m
                    memory: 65Mi
        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: ai-service
        spec:
          type: ClusterIP
          ports:
          - name: http
            port: 5001
            targetPort: 5001
          selector:
            app: ai-service
        
        EOF
